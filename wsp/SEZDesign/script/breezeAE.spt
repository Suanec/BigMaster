scala -J-Dcom.github.fommil.netlib.NativeSystemBLAS.natives=mkl_rt.dll -cp "D:\betn\Scala\ScalaSpace\breezeLib\breezeLib_2.11-assembly-natives-1.0.jar"
scala -cp "D:\Docs\Works_And_Jobs\Sina\libs\ml\self-libs\vbreeze_2.11-0.12-assembly-0.1.0-SNAPSHOT.jar"

object breezeAE extends Serializable {
  import scala.collection.mutable.ArrayBuffer
  import scala.math._
  import java.util.concurrent.ThreadLocalRandom

  import breeze.linalg._
  import breeze.numerics._
  import scala.util.Random
  import breeze.linalg.{
    DenseMatrix => BDM,
    DenseVector => BDV,
    Vector => BrzVector, 
    SparseVector => BSV,
    sum
  }
  import breeze.numerics.{
    exp => BrzExp,
    tanh => BrzTanh,
    sigmoid => BrzSigmoid, 
    pow => BrzPow, 
    sqrt => BrzSqrt
  }
  import breeze.stats.distributions.{
    Gaussian => BrzGaussian
  }

  type SDM = BDM[Double]
  type SDV = BDV[Double]
  type SSV = BSV[Double]
  type SBRZV = BrzVector[Double]

  type SVector = Array[Double]
  type SWord = (Int,Int,Double) // col, row, value
  type SWordBuf = ArrayBuffer[SWord]
  type SDoc = Array[SWord]
  type SDocs = Array[SDoc]
  type SData = (Int, SDoc)
  var learningRate = 0.001
  private var lambda1 = 1d
  private var lambda2 = 0d
  private var lambdaL2 = 0d
  val b = BDM(1d)
  val bv = BDV(1d)

  def size(_m : SDM) : (Int,Int) = _m.rows -> _m.cols
  def vertcat( _x : SDM, _y : SDM ) : SDM = {
    DenseMatrix.vertcat(_x, _y)
  }

  /// sigmoid(W * X + B )
  def wxpbS( _w : SDM, _x : SDM ) : SDM = {
    BrzSigmoid(_w * vertcat(_x, b))
  }

  def setLr(_lr : Double) = { learningRate = _lr }
  def setLambda1(_lambda : Double = 1d) = {
    lambda1 = _lambda
    if(lambda2 == 0) {
      lambdaL2 = 0
    }
    else {
      lambdaL2 = lambda1 / lambda2
    }
  }
  def setL2(_lambda : Double = 0d) = { lambdaL2 = _lambda }
  // type SDataSet = (Int, Int, RDD[SData])

  /**
   * 随机生成n2维数据
   * rows 行, cols 列，max 上限，min 下限，seed 随机种子
   * @author suanec
   */
  def RandM(
    rows : Int = 4,
    cols : Int = 3,
    max  : Double = 1.0,
    min  : Double = 0.0,
    seed : Long = 201512081552L): BDM[Double] = {
    // val rand = new Random(seed)
    val bdm_rand = BDM.tabulate[Double](rows, cols)((_, _) => ThreadLocalRandom.current().nextDouble(min,max))
    bdm_rand 
  }///   def RandM(

  /**
  生成随机矩阵，服从高斯分布
  */
  def gaussianM(
    _row : Int = 10,
    _col : Int = 7,
    _mu : Double = 0d,
    _sigma : Double = 1d) : SDM = {
    val gaussianRand = new BrzGaussian(_mu, _sigma)
    BDM.rand(_row, _col, gaussianRand)
  }

  /**
   * 将数组按行填充矩阵。
   * 
   */
  def arrFillMatByRow0(
    _row : Int,
    _col : Int,
    _data: Array[Double]) : SDM = {
    require(_row*_col <= _data.size, "target matrix too large, _data not enough!! == From boae.arrRowMat")
    BDM.tabulate[Double](_row,_col)((i,j) => _data( i*_col + j))
  }
  def arrFillMatByRow(
    _row : Int,
    _col : Int,
    _data: Array[Double]) : SDM = {
    require(_row*_col <= _data.size, "target matrix too large, _data not enough!! == From boae.arrRowMat")
    new SDM(_col, _row, _data).t.copy
  }
  def testArrFillMatByRowTime(_maxIter : Int = 10000 ) : String = {
    val data = gaussianM(9,7,0d,1d).data
    val start0 = System.nanoTime
    (0 to _maxIter).map( i => arrFillMatByRow0(9,7,data) )
    val end0 = System.nanoTime
    val time0 = end0 - start0
    val start1 = System.nanoTime
    (0 to _maxIter).map( i => arrFillMatByRow(9,7,data) )
    val end1 = System.nanoTime
    val time1 = end1 - start1
    val rst = (time1 > time0) match {
      case true => "arrFillMatByRow0"
      case false => "arrFillMatByRow"
    }
    println(rst)
    rst
  }
  
  /**
   * 自编码权值初始化函数
   * _size : 网络大小
   * max: 上限，min: 下限，seed: 随机种子
   * @author suanec
   */
  def InitWeight(
    _size  : Array[Int],
    _max   : Double = 0.5,
    _min   : Double = -0.5,
    _seed  : Long = 201512082245L) : (Array[SDM], Array[SDM]) = {
    val res = new Array[SDM](_size.size -1)
    res.indices.map{
      i => 
        res(i) = RandM(_size(i+1), _size(i) + 1,_max,_min,_seed)
    }
    res.splitAt(res.size / 2)
  }///   def InitWeight(
  def InitWeightGaussian(
    _size : Array[Int], 
    _mu : Double = 0d,
    _sigma : Double = 1e-4 ) : (Array[SDM], Array[SDM]) = {
    val res = new Array[SDM](_size.size -1)
    res.indices.map{
      i => 
        res(i) = gaussianM(_size(i+1), _size(i) + 1, _mu, _sigma)
    }
    res.splitAt(res.size / 2)
  }

  // def Dif_sigmoid( z : Double ) : Double = sigmoid(z) / ( 1 - sigmoid(z) )

  // def Dif_tanh( z : Double ) : Double = 1 - tanh(z) * tanh(z)

  // def MulDoc(_w : SDM,_doc : SDM):SDM = {_w * _doc}
  // MulDoc = w * x + b
  def MulDoc(
    _w : SDM,
    _doc : SDoc) : SDM = {
    val tSDM = new SDM(_w.rows,1)
    (0 until _w.rows).map{
      i =>
      (0 until _doc.size).map{
        j =>
        val rNum = _doc(j)._1 -1
        tSDM(i,0) += _w(i,rNum) * _doc(j)._3
      }
      tSDM(i,0) += _w(i,-1)
    }
    tSDM
  }
                                                                               
  def passAway(_w: Array[SDM], _doc : SSV ): Array[SDM] = {
    val newDoc = BSV.vertcat(_doc, BSV(1d))
    val z = BrzSigmoid((_w.head * newDoc).toDenseMatrix.t)
    val hideOuts = new Array[SDM](_w.size)
    hideOuts(0) = z
    (1 until _w.size).map{
      i => 
        hideOuts(i) = wxpbS(_w(i),hideOuts(i-1))
    }
    hideOuts//.toDenseMatrix.t
  }///   def encode(_wIn: SDM, _doc : SDoc ): SDM ={
  def passAway(_w: Array[SDM], _doc : SDV ): Array[SDM] = {
    val hideOuts = new Array[SDM](_w.size)
    hideOuts(0) = wxpbS(_w.head,_doc.toDenseMatrix.t)
    (1 until _w.size).map{
      i => 
        hideOuts(i) = wxpbS(_w(i), hideOuts(i-1))
    }
    hideOuts//.toDenseMatrix.t
  }///   def encode(_wIn: SDM, _doc : SDoc ): SDM ={
  
  def encode(_wIns : Array[SDM], _doc : SBRZV) : Array[SDM] = {
    _doc match {
      case doc : SDV => passAway(_wIns,doc)
      case doc : SSV => passAway(_wIns,doc)
    }
  }
  def decodeStacked(_wOuts : Array[SDM], 
    _hideOut: SDM, 
    _doc : SBRZV ) : (Array[SDM], SBRZV) = {
    val rst = _doc match {
      case doc : SDV => {
        val rst = passAway(_wOuts,_hideOut.toDenseVector)
        rst.init -> rst.last.toDenseVector.asInstanceOf[SBRZV]
      }
      case doc : SSV => {
        val hideRst = passAway(_wOuts.init,_hideOut.toDenseVector)
        val rstIndices = doc.index
        val wLast = _wOuts.last
        val hLast = BDM.vertcat(hideRst.last, b)
        val rstValues = rstIndices.map{
          i =>
            BrzSigmoid(wLast(i,::) * hLast)
        }
        val rstVector = new BSV(rstIndices,rstValues,doc.size)
        hideRst -> rstVector.asInstanceOf[SBRZV]//.toDenseVector.toDenseMatrix.t
      }
    }
    rst
  }///   def decode1(_wOut : SDM, _hideOut: SDM ) : SDM = {
  def decodeSigle(_wOuts : Array[SDM], 
    _hideOut: SDM, 
    _doc : SBRZV ) : SBRZV = {
    val rst = _doc match {
      case doc : SDV => passAway(_wOuts,_hideOut.toDenseVector).last.toDenseVector.asInstanceOf[SBRZV]
      case doc : SSV => {
        val rstIndices = doc.index
        val wLast = _wOuts.last
        val hLast = BDM.vertcat(_hideOut, b)
        val rstValues = rstIndices.map{
          i =>
            BrzSigmoid((wLast(i,::) * hLast).apply(0))
        }
        val rstVector = new BSV(rstIndices,rstValues,doc.size)
        rstVector.asInstanceOf[SBRZV]
      }
    }
    rst
  }///   def decode1(_wOut : SDM, _hideOut: SDM ) : SDM = {

  // def decode(_wOuts : Array[SDM], 
  //   _hideOut: SDM, 
  //   _doc : SBRZV ) : (Array[SDM], SBRZV) = {
  //   val rst = _doc match {
  //     case doc : SDV => {
  //       if(_wOuts.size > 1){
  //         val rst = passAway(_wOuts,_hideOut.toDenseVector)
  //         rst.init -> rst.last.toDenseVector.asInstanceOf[SBRZV]
  //       }
  //       else passAway(_wOuts,_hideOut.toDenseVector)
  //     }
  //     case doc : SSV => {
  //       if(_wOuts.size > 1){
  //         val hideRst = passAway(_wOuts.init,_hideOut.toDenseVector)
  //         val rstIndices = doc.index
  //         val wLast = _wOuts.last
  //         val hLast = hideRst.last
  //         val rstValues = rstIndices.map{
  //           i =>
  //             BrzSigmoid(wLast(i,::) * hLast)
  //         }
  //         val rstVector = new BSV(rstIndices,rstValues,doc.size)
  //         hideRst -> rstVector.asInstanceOf[SBRZV]
  //       }
  //       else {
  //         val rstIndices = doc.index
  //         val wLast = _wOuts.last
  //         val hLast = hideRst.last
  //         val rstValues = rstIndices.map{
  //           i =>
  //             BrzSigmoid(wLast(i,::) * hLast)
  //         }
  //         val rstVector = new BSV(rstIndices,rstValues,doc.size)
  //       }
  //     }
  //   }
  //   rst
  // }///   def decode(_wOut : SDM, _hideOut: SDM ) : SDM = {

  def FeedForwardStack( _inWs : Array[SDM], 
    _outWs : Array[SDM], 
    _in : SBRZV ) : (Array[SDM], (Array[SDM], SBRZV) )= {
    val a0 = encode(_inWs,_in)
    val a1 = decodeStacked(_outWs, a0.last, _in)
    a0 -> a1 
  }
  def FeedForwardSingle( _inWs : Array[SDM], 
    _outWs : Array[SDM], 
    _in : SBRZV ) : (Array[SDM], SBRZV) = {
    val a0 = encode(_inWs,_in)
    val a1 = decodeSigle(_outWs, a0.last, _in)
    a0 -> a1 
  }

  def FeedForward( _inWs : Array[SDM], 
    _outWs : Array[SDM],
    _in : SBRZV ) = {
    require( _inWs.size == _outWs.size, "NetConfig error in FeedForward")
    if(_inWs.size == 1) FeedForwardSingle(_inWs,_outWs,_in)
    else FeedForwardStack(_inWs,_outWs,_in)
  }
  def calcLoss( _inDoc : SBRZV, _outDoc : SBRZV ) : Double = {
    val minuSDoc = _inDoc - _outDoc
    val powDoc = minuSDoc :* minuSDoc
    val loss = powDoc.sum / powDoc.size.toDouble
    loss
  }
  def Dif_sigmoid( _vec : SBRZV ) : SBRZV = {
    _vec match {
      case vec : SDV => 
        (BrzSigmoid(vec) :/ (-BrzSigmoid(vec) :+ 1d)).asInstanceOf[SBRZV]
      case vec : SSV => {
        val indices = vec.index
        val values = vec.index.map{
          i =>
            BrzSigmoid(vec(i)) / (1 - BrzSigmoid(vec(i)))
        }
        new BSV(indices,values,vec.size).asInstanceOf[SBRZV]
      }
    }
  }
  def calcErrorOut( _inDoc : SBRZV, _outDoc :SBRZV ) : SBRZV = {
    val minusVec = _inDoc - _outDoc
    val powVec = minusVec :* minusVec
    val loss = powVec.sum / powVec.size.toDouble
    println(s"Loss : ${loss}")
    minusVec :* Dif_sigmoid(_outDoc)
  }
  def calcErrorHidden( _errOut : SBRZV, _outWs : SDM, _hideOut : SDM) : SBRZV = {
    val wT = _outWs.t
    val errHidden = wT * _errOut
    val dif_hidden = Dif_sigmoid(_hideOut(::,0))
    dif_hidden :* errHidden
  }
  // def calcErrorHiddenStack( _errOut : SBRZV, _inWs : Array[SDM], _outWs : Array[SDM], _hideOuts : Array[SDM]) : Array[SBRZV] = {}

  def updateW(_in : SBRZV, _hideOut : SDM,
              _errOut : SBRZV, _errHidden : SBRZV, 
              _inWs : SDM, _outWs : SDM) = {
    val dv_in = BDV.vertcat(_in.toDenseVector, bv).t 
    val deltaWin = _errHidden.toDenseVector * dv_in
    require(deltaWin.rows == _inWs.rows && deltaWin.cols == _inWs.cols, "deltaWin.size != _inWs.size")
    _inWs += deltaWin * lambda1 * learningRate
    val dv_out = _errOut.toDenseVector 
    val hov = BDV.vertcat(_hideOut(::,0),bv).t
    val deltaWout = dv_out * hov
    require(deltaWout.rows == _outWs.rows && deltaWout.cols == _outWs.cols, "deltaWout.size != _outWs.size ")
    _outWs += deltaWout * lambda1 * learningRate
  }
  def NNBP( _wIns : Array[SDM], _wOuts : Array[SDM], _in : SBRZV) : (Array[SDM], Array[SDM]) = {
    val (hideOuts, outObject) = FeedForward(_wIns,_wOuts,_in)
    val outVector = outObject.asInstanceOf[SBRZV]
    val errorOut = calcErrorOut(_in,outVector)
    val errorHidden = calcErrorHidden( errorOut, _wOuts.head, hideOuts.head)
    val rst = updateW(_in, hideOuts.head, errorOut, errorHidden, _wIns.head, _wOuts.head)
    (_wIns, _wOuts)
    // hideOuts
  }
}

import breezeAE._
val eggData = BDM.eye[Double](8)
val eggCols = (0 until eggData.cols).map( i => eggData(::,i) )
val eggRows = (0 until eggData.rows).map( i => eggData(i,::) )
val (iw,ow) = InitWeightGaussian(Array(8,3,8))
setLr(0.3)


(0 until 1000).map{
  i => 
    eggCols.map{
      line => NNBP(iw,ow,line)
    }
}
val enc = eggCols.map{
  line => 
    val eh = encode(iw,line).head//.map(_.round)
    (line -> eh.data.map(_.round))
}
val dec = eggCols.map{
  line => 
    val eh = encode(iw,line).head
    val eo = decodeSigle(ow,eh,line).map(_.round)
    (line -> eo)
}.foreach(println)


val (iw,ow) = InitWeightGaussian(Array(8,3,8))
setLr(0.3)
val eggSparse = (0 until 8).map{
  i =>
    new SSV(Array(i),Array(1d),8)
}
(0 until 1000).map{
  i => 
    eggSparse.map{
      line => NNBP(iw,ow,line)
    }
}
val enc = eggSparse.map{
  line => 
    val eh = encode(iw,line).head//.map(_.round)
    (line -> eh.data.map(_.round))
}
val dec = eggSparse.map{
  line => 
    val eh = encode(iw,line).head
    val eo = decodeSigle(ow,eh,line).map(_.round)
    (line -> eo)
}.foreach(println)

